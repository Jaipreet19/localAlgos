TRIE Data Structure :: https://www.cs.bu.edu/teaching/c/tree/trie/

      - Trie is a tree data structure used for storing collections of Strings 
      - A trie allows us to share prefixes that are common among keys
      (We use a trie to store pieces of data that have a key (used to identify the data) and possibly a value 
      (which holds any additional data associated with the key).)
      
      Here, we will use data whose keys are strings.
      Suppose we want to store a bunch of name/age pairs for a set of people (we'll consider names to be a single string here).

      Here are some pairs:

      amy	56
      ann	15
      emma	30
      rob	27
      roger	52
      
      Now, how will we store these name/value pairs in a trie? A trie allows us to share prefixes that are common among keys. 
      Again, our keys are names, which are strings.
      
                      .
              /       |      \
             a        e       r
           /   \      |       |
          m     n     m       o
          |     |     |     /   \
          y     n     m    b     g
          |     |     |    |     |
        \0 56 \0 15   a  \0 27   e
                      |          |
                    \0 30        r
                                 |
                               \0 52
                             
       To better understand how a trie works, answer the following questions.
          - What would the trie look like if we now added anne with age 67? How about ro with age 23?
          - Would the trie look different if we added the names in a different order, say: rob, ann, emma, roger, amy?
          - Is this a binary tree, tertiary tree or what? In other words, each node has at most how many children?
          
          
Trie operations:
        Here are the operations that we will concern ourselves with for this trie. You may need others for a particular use of the trie.

        -Add:
          We've already given examples of adding.

        -IsMember:
          See if data with a certain string key is in the trie.
          For example, IsMember(trie, "amy") should report a true value and and IsMember(trie, "anna") should report a false value.
          We can imagine other variations where we do something with the value (like return it) once we find something with the matching key.

        -Remove:
          Remove something from the trie, given its key.
          
About Suffix Tree::
	- http://courses.csail.mit.edu/6.851/spring12/lectures/L16.html

	- https://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english/9513423#9513423
	
	- http://marknelson.us/1996/08/01/suffix-trees/

	- Tushar video
	- ukkonen's algo - https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf
	- suffix array
	- suffix link

	- https://www.hackerearth.com/practice/notes/trie-suffix-tree-suffix-array/
	- http://web.cs.elte.hu/~berkri/Theses/Vasarhelyi_2.pdf
	
Refer the Note As well.
