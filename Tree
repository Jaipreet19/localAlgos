1. General Tree ::<-

	Sources -
	https://github.com/vivin/GenericTree/tree/master/src/main/java/net/vivin
	https://codereview.stackexchange.com/questions/77580/generic-tree-in-java
	https://inst.eecs.berkeley.edu/~cs61b/sp06/labs/s9-1-3


2. Binary Tree ::
	
	Implemetation -
		a) Array Representation(Sequential Representation): https://www.geeksforgeeks.org/binary-tree-array-implementation/
		b) Dynamic Node Representation(Linked Representation): Did it myself

	Source - https://www.cpp.edu/~ftang/courses/CS241/notes/Building_Heaps_With_Pointers.pdf

	Definition - 
		a: The depth of a node is the number of edges from the root to the node.
		b: The height of a node is the number of edges from the node to the deepest leaf.
		c: The height of a tree is a height of the root.
		d: A full binary tree.is a binary tree in which each node has exactly zero or two children.
		e: A complete binary tree is a binary tree, which is completely filled, with the possible 	
		   exception of the bottom level, which is filled from left to right. 

	Traversals -
			1) depth-first traversal
				a) PreOrder traversal
				b) InOrder traversal
				c) PostOrder traversal : https://algorithms.tutorialhorizon.com/binary-tree-postorder-traversal-non-recursive-approach/
			2) breadth-first traversal
				level order traversal

3. Binary Search Trees ::
	Check Delete Operation - tricky

4. Binary Heap ::
	
	a) Min-Heap
	b) Max-Heap

	==> In a heap the highest (or lowest) priority element is always stored at the root.
	==> Heap is a complete binary tree, it has a smallest possible height - a heap with N nodes 
		always has O(log N) height

	Implementaion -
		a) Array Implementation.
			=> A complete binary tree can be uniquely represented by storing its level order 
			   traversal in an array.

			=> Considering root @Index 1 (rather @0)
				Elements left child is located at 2*k (rather @2k+1)index
				Elements right child is located at 2*k+1. (@2k+2)index
				Elements parent is located at k/2 (rather @(k-1)/2)index
